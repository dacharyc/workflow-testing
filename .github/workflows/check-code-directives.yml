name: Check Code Example Directives

on:
    pull_request:
        paths:
        - "source/**"

jobs:
    search_code_directives:
        runs-on: ubuntu-latest
        steps:
        - name: Check out content from PR
          uses: actions/checkout@v3
          with:  
            fetch-depth: 0
  
        - name: Fetch base branch  
          run: git fetch origin ${{ github.base_ref }} --depth=1 

        - name: Search for undesired directives
          run: |
            errors=""

            diff_lines=$(git diff origin/${{ github.base_ref }}...${{ github.sha }})

            current_filename=""
            code_block_counter=0
            code_counter=0

            # Process the captured diffs line by line
            while IFS= read -r line; do

              # Detect filename lines, which start with '+++ b/'
              if [[ "$line" =~ ^\+\+\+ ]]; then
                # Extract the current filename
                current_filename=$(echo "$line" | sed "s/^+++ b\///")

                # Check if the filename starts with 'source/' and reset counters if true
                if [[ "$current_filename" == source/* ]]; then
                  # If the current file has counts from previous file, print the errors before resetting
                  if [ "$current_filename" != "" ] && ([ $code_block_counter -gt 0 ] || [ $code_counter -gt 0 ]); then
                    errors="yes"
                    echo "'$current_filename' contains deprecated code block directives"
                    if [ $code_block_counter -gt 0 ]; then
                      echo "- the deprecated '.. code-block::' directive appears $code_block_counter times in this file"
                    fi
                    if [ $code_counter -gt 0 ]; then
                      echo "- the deprecated '.. code::' directive appears $code_counter times in this file"
                    fi
                  fi
                  # Reset counters
                  code_block_counter=0
                  code_counter=0
                else
                  # Set filename empty to skip processing unrelated directories
                  current_filename=""
                fi
              fi

              # When filename is valid and starts with 'source/', check the diff changes
              if [[ "$current_filename" == source/* ]] && [[ "$line" =~ ^\+ && ! "$line" =~ ^\+\+\+ ]]; then
                if echo "$line" | grep -q '.. code-block::'; then
                  ((code_block_counter++))
                fi
                if echo "$line" | grep -q '.. code::'; then
                  ((code_counter++))
                fi
              fi
            done <<< "$diff_lines"

            # After processing all lines, check and print the final file's error if necessary
            if [[ "$current_filename" == source/* ]] && ([ $code_block_counter -gt 0 ] || [ $code_counter -gt 0 ]); then
              errors="yes"
              echo "$current_filename contains unsupported code block directives"
              if [ $code_block_counter -gt 0 ]; then
                echo "- the deprecated '.. code-block::' directive appears $code_block_counter times in this file"
              fi
              if [ $code_counter -gt 0 ]; then
                echo "- the deprecated '.. code::' directive appears $code_counter times in this file"
              fi
            fi

            # Provide a summary based on errors found
            if [ "$errors" == "yes" ]; then
              echo "Please replace these directives with '.. literalinclude::' or '.. io-code-block::'"
              exit 1
            else
              echo "No errors found."
            fi
